@inject NavigationManager navigation

@page "/PropriedadesPlanoSaude"

<MudText Typo="Typo.h5">
    Me diga, quais características, coberturas e vidas o plano de saúde deve cobrir?
</MudText>

<br />
<br />

<MudGrid>
    <MudItem md="12" sm="12">
        <MudText Typo="Typo.subtitle1" Color="Color.Tertiary">
            Informe o tipo de contratação (adesão):
        </MudText>
    </MudItem>
    <MudItem md="12" sm="12">
        <MudSelect T="TipoContratacaoEnum" @bind-Value="Model.TipoContratacao" FullWidth="true"
                   Label="Tipo de Contratação" Variant="Variant.Outlined" 
                   ToStringFunc="m => m.ToDescription()" Clearable>
            @foreach (var item in Enum.GetValues<TipoContratacaoEnum>())
            {
                <MudSelectItem Value="@item" />
            }
        </MudSelect>
    </MudItem>
</MudGrid>

<br />
<br />

<MudGrid>
    <MudItem md="12" sm="12">
        <MudText Typo="Typo.subtitle1" Color="Color.Tertiary">
            Informe o segmento assistencial (coberturas):
        </MudText>
    </MudItem>
    <MudItem md="12" sm="12">
        <MudSelect T="SegmentoAssistencialEnum" @bind-Value="Model.SegmentoAssistencial" FullWidth="true"
                   Label="Segmento Assistencial" Variant="Variant.Outlined" 
                   ToStringFunc="m => m.ToDescription()" Clearable>
            @foreach (var item in Enum.GetValues<SegmentoAssistencialEnum>())
            {
                <MudSelectItem Value="@item" />
            }
        </MudSelect>
    </MudItem>
</MudGrid>

<br />
<br />

<MudGrid>
    <MudItem md="12" sm="12">
        <MudText Typo="Typo.subtitle1" Color="Color.Tertiary">
            Informe a quantidade de vidas por faixa etária:
        </MudText>
    </MudItem>
    <MudItem md="12" sm="12">
        <MudTable Items="@Model.Vidas" Hover="true">
            <HeaderContent>
                <MudTh Style="text-align: left;">Faixa Etária</MudTh>
                <MudTh Style="text-align: center;">Quantidade</MudTh>
                <MudTh Style="text-align: right;">Remover / Adicionar</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Faixa Etária" Style="@($"font-size: 12pt; color: {Colors.DeepPurple.Accent1}")">@(context.FaixaEtaria.ToDescription())</MudTd>
                <MudTd DataLabel="Quantidade" Style="@($"text-align: center; font-size: 16pt; color: {Colors.Teal.Accent3}")">@(context.Quantidade)</MudTd>
                <MudTd  Style="text-align: right;">
                    <MudIconButton Icon="@Icons.Material.Filled.Remove" 
                    Variant="Variant.Filled" Color="Color.Default" 
                    OnClick="() => removerCotacaoVida(ref context)" />

                    <MudIconButton Icon="@Icons.Material.Filled.Add" 
                    Variant="Variant.Filled" Color="Color.Default"
                    OnClick="() => adicionarCotacaoVida(ref context)" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudGrid>

<br />
<br />

<MudGrid>
    <MudItem md="12" Style="text-align: left;">
        <MudFab Color="Color.Default" Label="Voltar"
                StartIcon="@Icons.Material.Filled.NavigateBefore"
                OnClick='() => navigation.NavigateTo("/")' />
        <MudFab Color="Color.Primary"
                EndIcon="@Icons.Material.Filled.NavigateNext"
                Label="Avançar" />
    </MudItem>
</MudGrid>

@code {
    public CotacaoViewModel Model { get; set; } = new CotacaoViewModel();

    [Parameter]
    [SupplyParameterFromQuery]
    public string? uf { get; set; }

    protected override void OnInitialized()
    {
        Model.Uf = uf ?? "";
        Model.TipoContratacao = TipoContratacaoEnum.IndividualOuFamiliar;
        Model.SegmentoAssistencial = SegmentoAssistencialEnum.AmbulatorialHospitalarComObstetricia;

        foreach (FaixaEtariaEnum item in Enum.GetValues(typeof(FaixaEtariaEnum)))
        {
            Model.Vidas.Add(new CotacaoVidaViewModel
            {
                FaixaEtaria = item,
                Quantidade = 0
            });
        }
    }

    private List<string> listaTipoContratacao =>
    EnumerationExtension.EnumDescriptions<TipoContratacaoEnum>().ToList();

    private List<string> listaSegmentoAssistencial =>
    EnumerationExtension.EnumDescriptions<SegmentoAssistencialEnum>().ToList();

    private void adicionarCotacaoVida(ref CotacaoVidaViewModel vida)
    {
        vida.Quantidade++;
    }

    private void removerCotacaoVida(ref CotacaoVidaViewModel vida)
    {
        vida.Quantidade = vida.Quantidade == 0 ? 0 : vida.Quantidade - 1;
    }
}